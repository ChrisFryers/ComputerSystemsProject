# \\  -------- IMPORTS -------- //

from ast import Return
from codecs import getdecoder
from pkgutil import get_data
from typing import List
from unicodedata import name
import PySimpleGUI as sg
import numpy as np
import datetime as dt
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# cyclical imports
from statsmodels.tsa.filters.hp_filter import hpfilter

# forecasting imports
import math # Mathematical functions 
from datetime import date, timedelta, datetime # Date Functions
from pandas.plotting import register_matplotlib_converters # This function adds plotting functions for calender dates
import matplotlib.dates as mdates # Formatting dates
from sklearn.metrics import mean_absolute_error, mean_squared_error # Packages for measuring model performance / errors
from keras.models import Sequential # Deep learning library, used for neural networks
from keras.layers import LSTM, Dense, Dropout # Deep learning classes for recurrent and regular densely-connected layers
from keras.callbacks import EarlyStopping # EarlyStopping during model training
from sklearn.preprocessing import RobustScaler, MinMaxScaler # This Scaler removes the median and scales the data according to the quantile range to normalize the price data 
import seaborn as sns

# for outliers in data cleaning
from scipy import stats

# Data API
from pandas_datareader import data as pdr
import yfinance as yfin
yfin.pdr_override()

# \\  -------- GET DATA -------- //

def importData():

    # specify date range for analysis
    end = dt.datetime.now()  # end date is now
    start = dt.datetime(2000, 1, 1)   # start date  

    # ticker data to import - used yahoofinance as reference to ticker format
    #tickerlist = ['SPY', '^DJI', '^IXIC', 'CL=F', 'GC=F', 'SI=F','NG=F', 'ZW=F', '^TNX', 'ETH-USD', 'BTC-USD', 'XRP-USD', 'DX-Y.NYB', 'EURUSD=X', 'GBPUSD=X', 'JPYUSD=X', 'NZDUSD=X', 'AUDUSD=X', 'CADUSD=X', 'CHFUSD=X']

    tickerlist = ['GBPUSD=X', 'EURUSD=X']

    # pandas datareader
    df = pdr.get_data_yahoo(tickerlist, start, end)




    return df

# call importData function first on loading (only once) and save in dataframe for getData function to call dataframe
dataFrame = importData()

def getData():

    # get data generated from importData()
    df = dataFrame

    # clean data section
    df = df['Close']  # takes the close rows
    
    df = df.fillna(method = 'backfill')  # takes the close rows and fills in missing values back
    df = df.fillna(method = 'ffill')  # takes the close rows and fills in missing values forwards, for some markets operating at different days

    df = df.asfreq('D') # changes frequency to daily

    df = df.interpolate(method = 'linear') # fill gaps to the correct frequency

    df = df[(np.abs(stats.zscore(df)) < 10).all(axis=1)] # remove any extreme outliers



    
    #df = pd.read_csv(r'C:\Users\Chris\Desktop\UlsterUniversity\Final Project\PySimpleGUI\Closedf.csv', parse_dates = True, index_col = 'Date')
    df = df[['EURUSD=X', 'GBPUSD=X']]

    # specifying period
    end = dt.datetime.now()  # end date is now
    start = dt.datetime(2005, 1, 1)   # start date  
    df = df[start:end]
    
    #returns dataframe
    return df

# function for correlation Matrix
def get_Corr_Matrix():
    
    # create layout and window
    layout2 = [
              [sg.Canvas(key='figCanvas_Corr', expand_x = True, expand_y = True)]
              ]

    _VARS['window2'] = sg.Window('CORRELATION MATRIX',
                            layout2,
                            size = (1000, 500),
                            finalize=True,
                            resizable=True,
                            location=(100, 100),
                            element_justification="center",
                            background_color='black')

    # Get data, calculate correlations and sort values
    df = getData()                                                    # get dataframe
    df_corr = df.corr()                                               # calculate and create correlation df
    df_corr = df_corr.sort_values(by = 'EURUSD=X', ascending = False) # sort values by dollar index

    # add matplot figure to pysimplefigure
    _VARS['pltFig_corr'] = plt.figure(num = 4)

    plt.figure(num = 4)  # select figure to append
    plt.clf()            # clear selected figure

    # create correlation 
    corrplot = sns.heatmap(
        data = df_corr,              # using the correlation dataframe
        cmap = 'RdYlGn_r',           # green and red colours
        square=True,                 # style of heatmap
        annot = True,                # draw number correlations on squares
        fmt='.2g',                   # round up to 2 decimal points
        annot_kws = {"fontsize": 8}  # font size of the correlation numbers on the boxes
    )
    # identify figure
    plt.figure(num = 'Correlation Figure', figsize = (11, 11)) # set figure size
    plt.title('Correlation Plot')                              # figure title
    plt.figure(num = 4)                                        # select figure to append
    plt.draw()                                                 # draw selected figure

    # draw figure to canvas
    _VARS['fig_agg_corr'] = draw_figure(
        _VARS['window2']['figCanvas_Corr'].TKCanvas, _VARS['pltFig_corr'])

# function to get list of assets from dataframe
def getAssetList():
    #get list of assets from dataset
    data = getData()
    assetsList = list(data)
    return assetsList

# creating lists for watchlists

# default watchlist with all tickers
assetsList = getAssetList()

# custom watchlist with user selected tickers
custom_assetList = []

# \\  -------- SORTING ASSETLIST -------- //

def sort_assetList_AZ():
    
    # using assetsList
    assetsList = getAssetList()

    # sorting assetsList and saving to new variable
    assetsList = sorted(assetsList)

    return assetsList

# sorted assetsLists
az_assetslist = sort_assetList_AZ()

# sort by last price - high to low
def sort_assetList_Price():

    # using assetList
    assetsList = getAssetList()

    # getting price data
    data = getData()

    # create empty list for prices only
    assetPrice = []

    # loop to extract last price from each asset
    for i in assetsList:
        price = data[i][-1]
        assetPrice.append(price)

    # create dataframe with asset tickers ass column headings
    df_price = pd.DataFrame(columns = assetsList)

    df_length = len(df_price)

    df_price.loc[df_length] = assetPrice

    # create series that contains price values and an index of tickers
    var = df_price.iloc[0]

    # sort the values
    var = var.sort_values(ascending = False)

    #extract the list of tickers
    listofprices = var.index

    # create list type object with tickers
    listofprices = list(listofprices)
    # sort by row of prices

    return listofprices

price_assetslist = sort_assetList_Price()


# sort watch list by 
def sort_assetList_ROC():

    #get price data
    df = getData()

    # create rate of change dataframe
    df_ROC = df.pct_change(periods = 1)  # change period number to selected timeframe eventually
    df_ROC = df_ROC[1:]  # remove first nulls

    assetPrice = []

    # loop to extract last price from each asset
    for i in assetsList:
        price = df_ROC[i][-1]
        assetPrice.append(price)

    # create dataframe with asset tickers ass column headings
    df_price = pd.DataFrame(columns = assetsList)

    df_length = len(df_price)

    df_price.loc[df_length] = assetPrice

    # create series that contains price values and an index of tickers
    var = df_price.iloc[0]

    # sort the values
    var = var.sort_values(ascending = False)

    #extract the list of tickers
    listofprices = var.index

    # create list type object with tickers
    listofprices = list(listofprices)
    # sort by row of prices

    return listofprices

ROC_assetslist = sort_assetList_ROC()

# \\  -------- CYCLICAL ANALYSIS -------- //

# function to get cyclcial analysis data
def get_cyclical_analysis():
    
    # getting the data
    df = getData()

    #()  asset symbol selected from list
    asset = df[assetSelected]

    asset_cycle,asset_trend = hpfilter(asset, lamb=1600*30**4)

    return asset_cycle

# function to produce forecast prediction
def get_forecast_analysis():

    # getting the data
    df = getData()

    # \\  -------- CREATING EMPTY DATAFRAME FOR PREDICTIONS -------- //

    # creating the date range
    forecast_start = dt.datetime.now()  # end date is now
    #print(forecast_start)
    forecast_end = dt.datetime.now() + timedelta(days = 29)  # starting day + forecast days - 1. 
    #print(forecast_end)
    # create date range
    dateRange = pd.date_range(start = forecast_start, end = forecast_end, freq = 'D')
    # creating empty dataframe
    df_forecast = pd.DataFrame(index = dateRange)





    # \\  -------- START LOOP TO ITER THROUGH DATAFRMAE COLUMNS -------- //


    ## start to loop around dataframe for every column
    for column_name in df:

        #column_name = name of column

        # Indexing Batches
        df_train = df.sort_values(by=['Date']).copy()

        # Save a copy of the dates index, before we need to reset it to numbers
        date_index = df_train.index

        # We reset the index, so we can convert the date-index to a number-index
        df_train = df_train.reset_index(drop=True).copy()






        # preparing the data w/ feature engineering

        def prepare_data(df):

            # List of considered Features - change to list of headings in df (df.index())
            # using all columns in df

            # Create the dataset with features and filter the data to the list of FEATURES
            df_filter = df # using all columns in df
    
            # Convert the data to numpy values
            np_filter_unscaled = np.array(df_filter)

            np_c_unscaled = np.array(df[column_name]).reshape(-1, 1)                            # change from df to df[column_name]
    
            return np_filter_unscaled, np_c_unscaled
    
        np_filter_unscaled, np_c_unscaled = prepare_data(df_train)
                                          
        # Creating a separate scaler that works on a single column for scaling predictions
        # Scale each feature to a range between 0 and 1
        scaler_train = MinMaxScaler()
        np_scaled = scaler_train.fit_transform(np_filter_unscaled)
    
        # Create a separate scaler for a single column
        scaler_pred = MinMaxScaler()
        np_scaled_c = scaler_pred.fit_transform(np_c_unscaled)  




        # \\  -------- SETTING SEQUENCE LENGTHS AND TEST AND TRAIN DATA -------- //

        # Set the input_sequence_length length - this is the timeframe used to make a single prediction - experiment witht his number to find optimal accuracy
        input_sequence_length = 50
        # The output sequence length is the number of steps that the neural network predicts
        output_sequence_length = 30 #

        # Prediction Index -  *** will need to change this to a variable to loop around df
        index_Close = df_train.columns.get_loc(column_name)

        # Split the training data into train and train data sets
        # As a first step, we get the number of rows to train the model on 80% of the data 
        train_data_length = math.ceil(np_scaled.shape[0] * 0.8)

        # Create the training and test data
        train_data = np_scaled[0:train_data_length, :]
        test_data = np_scaled[train_data_length - input_sequence_length:, :]


        # The RNN needs data with the format of [samples, time steps, features]
        # Here, we create N samples, input_sequence_length time steps per sample, and f features
        def partition_dataset(input_sequence_length, output_sequence_length, data):
            x, y = [], []
            data_len = data.shape[0]
            for i in range(input_sequence_length, data_len - output_sequence_length):
                x.append(data[i-input_sequence_length:i,:]) #contains input_sequence_length values 0-input_sequence_length * columns
                y.append(data[i:i + output_sequence_length, index_Close]) #contains the prediction values for validation (3rd column = Close),  for single-step prediction
    
            # Convert the x and y to numpy arrays
            x = np.array(x)
            y = np.array(y)
            return x, y

        # Generate training data and test data
        x_train, y_train = partition_dataset(input_sequence_length, output_sequence_length, train_data)
        x_test, y_test = partition_dataset(input_sequence_length, output_sequence_length, test_data)



        # \\  -------- CREATING MTHE RNN LSTM MODEL -------- //

        # prepare the neural network archiecture and train the multi-output regression model

        # Configure the neural network model
        model = Sequential()
        n_output_neurons = output_sequence_length

        # Model with n_neurons = inputshape Timestamps, each with x_train.shape[2] variables
        n_input_neurons = x_train.shape[1] * x_train.shape[2]
        model.add(LSTM(n_input_neurons, return_sequences=True, input_shape=(x_train.shape[1], x_train.shape[2]))) 
        model.add(LSTM(n_input_neurons, return_sequences=False))
        model.add(Dense(20))
        model.add(Dense(n_output_neurons))

        # Compile the model
        model.compile(optimizer='adam', loss='mse')




        # \\  -------- TRAINING THE MODEL -------- //


        # Training the model
        epochs = 1 # set to 13 for optimal
        batch_size = 150 # set to 12 as optimal
        early_stop = EarlyStopping(monitor='loss', patience=5, verbose=1)
        history = model.fit(x_train, y_train, 
                            batch_size=batch_size, 
                            epochs=epochs,
                            validation_data=(x_test, y_test)
                            )
                    
                            #callbacks=[early_stop])




        # \\  -------- TRANSFORMING (UNSCALING) THE DATA BACK -------- //

        # Get the predicted values
        y_pred_scaled = model.predict(x_test)

        # Unscale the predicted values
        y_pred = scaler_pred.inverse_transform(y_pred_scaled)
        y_test_unscaled = scaler_pred.inverse_transform(y_test).reshape(-1, output_sequence_length)
        y_test_unscaled.shape


        x_test_unscaled = scaler_pred.inverse_transform(np.array(pd.DataFrame(x_test[0])[index_Close]).reshape(-1, 1)) 
        df_test = pd.DataFrame(x_test_unscaled)



        # get the highest index from the x_test dataset
        index_max = x_test.shape[0]
        x_test_new = np_scaled[-51:-1,:].reshape(1,50,len(list(df))) # changed last digit from 2 to number of columns in dataframe

        # undo the scaling of the predictions
        y_pred_scaled = model.predict(x_test_new)
        y_pred = scaler_pred.inverse_transform(y_pred_scaled)

 
 

       # \\  -------- ADDING FORECASTS TO THE FORECAST DATAFRAME -------- //

       # transforming predictions to put in dataframe
        y_pred = np.array(y_pred)
        y_pred_l = np.ndarray.tolist(y_pred[0])


        # putting prediction in dataframe under its column name
        df_forecast[column_name] = y_pred_l

        

    return df_forecast


# VARS CONSTS:
_VARS = {'window': False,
         'fig_agg': False,
         'pltFig': False, 

         'figg_agg_cycle': False,
         'pltFig_cycle': False,

         'figg_agg_forecast': False,
         'pltFig_forecast': False,

         'fig_agg_hist': False,
         'pltFig_hist': False,

         'fig_agg_roc': False,
         'pltFig_roc': False,

         'window2': False,
         'figg_agg_corr': False,
         'pltFig_corr': False,

         }

# \\  -------- PYSIMPLEGUI THEME -------- //

theme_dict = {'BACKGROUND': '#2B475D',
                'TEXT': '#FFFFFF',
                'INPUT': '#F2EFE8',
                'TEXT_INPUT': '#000000',
                'SCROLL': '#F2EFE8',
                'BUTTON': ('#000000', '#C2D4D8'),
                'PROGRESS': ('#FFFFFF', '#C7D5E0'),
                'BORDER': 1,'SLIDER_DEPTH': 0, 'PROGRESS_DEPTH': 0}

# sg.theme_add_new('Dashboard', theme_dict)     # if using 4.20.0.1+
sg.LOOK_AND_FEEL_TABLE['TICKERWATCH'] = theme_dict
sg.theme('TICKERWATCH')

# Theme for pyplot
#plt.style.use('dark_background')

AppFont = 'Any 16'
#sg.theme('black')

# \\  -------- ELEMENTS IN LAYOUT -------- //

top = [[sg.Button('CORRELATIONS', font = AppFont, key = 'Correlations'), 
        sg.Text('TICKERWATCH', font='Any 20', expand_x= True, justification = 'center'),
        sg.Text(str(dt.datetime.now().date()), font='Any 20', justification = 'right')]]

# main chart
block_1 = [
    [sg.Canvas(key='figCanvas', expand_x = True, expand_y = True), sg.Slider(key = 'TIMEFRAME_ADJUST', range = (1, 365), default_value = 1, resolution = 1, orientation = 'v', enable_events = True, size = (20, 5))]  
          ]

# forecast and cyclical chart
block_2 = [
    [sg.Canvas(key='figCanvas_Forecast'), sg.Canvas(key='figCanvas_Cycle')]
          ]

# watchlist 
block_3 = [
    [sg.Text(text = 'ASSETS LIST', expand_x = True , justification = 'center')],
    [sg.Button('A-Z', size = (3, 1), key = '-SORT-AZ-'), sg.Button('PRICE', size = (5, 1), key = '-SORT-PRICE-'), sg.Button('CHNG', size = (5, 1), key = '-SORT-ROC-')],
    [sg.Listbox( values = assetsList, size = (18, 11), enable_events = True, key = '-LISTBOX_CLICK-')],
    [sg.Text(text = 'CUSTOM LIST', expand_x = True, justification = 'center')],
    [sg.Input(key = 'INPUT_TEXT', default_text = 'Enter A Ticker', enable_events = True, size = (20,1), justification = 'center')],
    [sg.Listbox( values = custom_assetList, size = (18, 7), enable_events = True, key = '-CUSTOM-LISTBOX_CLICK-')],
    [sg.Text(text = '2ND TICKER', expand_x = True, justification = 'center')],
    [sg.Input(key = 'ADDITIONAL_TICKER', default_text = 'Enter A Ticker', enable_events = True, size = (20,1), justification = 'center')]
          ]

block_4 = [
    [sg.Canvas(key='figCanvas_Hist'), sg.Canvas(key='figCanvas_Roc')]
          ]


# \\  -------- LAYOUT -------- //

layout = [[sg.Column(top, expand_x = True)],
          [sg.Column(block_1, expand_x = True), sg.Column(block_3)],
          [sg.Column(block_2, expand_x = True), sg.Column(block_4, expand_x = True)]
         ]

# \\  -------- APPLICATION WINDOW  -------- //

_VARS['window'] = sg.Window('TickerWatch',
                            layout,
                            size = (1000, 500),
                            finalize=True,
                            resizable=True,
                            location=(100, 100),
                            element_justification="center",
                            background_color='black',
                            icon = 'PySimpleGUIExamples/app_icon.ico'
                            )

# enable event for input boxs upon pressing enter
_VARS['window']['INPUT_TEXT'].bind("<Return>", "_Enter")


_VARS['window']['ADDITIONAL_TICKER'].bind("<Return>", "_Enter")

# \\  -------- PYSIMPLEGUI -------- //

# \\  -------- PYPLOTS -------- //

def draw_figure(canvas, figure):
    figure_canvas_agg = FigureCanvasTkAgg(figure, canvas)
    figure_canvas_agg.draw()
    figure_canvas_agg.get_tk_widget().pack(side='top', fill='both', expand=5)
    return figure_canvas_agg

# \\  -------- MAIN -------- //

def drawMainChart():
    _VARS['pltFig'] = plt.figure(num = 1)
    data = getData()
    plt.plot(data['EURUSD=X'])
    plt.title('EURUSD=X')
    plt.tight_layout()                                           # smaller margins around chart in the figure
    _VARS['fig_agg'] = draw_figure(
        _VARS['window']['figCanvas'].TKCanvas, _VARS['pltFig'])

def updateMainChart():

    #getting data to display
    data = getData()

    # updating chart
    plt.figure(num = 1)           # tell the program we selecting figure 1 to update
    plt.clf()                     # clearing information on chart 
    plt.plot(data[assetSelected]) # plotting new selected data
    plt.title(assetSelected)
    plt.tight_layout()       # adding title from seleected data
    plt.draw()                    # drawing the information on the chart

# update main chart with additional ticker symbol
def updateMainChartAdd():

    #getting data to display
    data = getData()

    # updating chart
    plt.figure(num = 1)           # tell the program we selecting figure 1 to update
    plt.clf()                     # clearing information on chart 
    plt.plot(data[assetSelected]) # plotting new selected data
    plt.plot(data[assetSelected2]) # plotting new selected data
    plt.title(assetSelected)
    plt.tight_layout()       # adding title from seleected data
    plt.draw()                    # drawing the information on the chart

    sg.Popup('func - chart drawn')


# \\  -------- CYCLICAL -------- //

# draw cycle chart function
def drawCycleChart():
    _VARS['pltFig_cycle'] = plt.figure(num = 2, figsize =(5.75, 6), dpi = 80)
    data = getData()
    plt.plot(data['EURUSD=X'])
    plt.title('CYCLICAL TENDANCY')
    plt.tight_layout() 
    _VARS['fig_agg_cycle'] = draw_figure(
        _VARS['window']['figCanvas_Cycle'].TKCanvas, _VARS['pltFig_cycle'])

# update cycle chart function
def updateCycleChart():

    #getting data to display
    asset_cycle = get_cyclical_analysis()
    
    # updating chart
    plt.figure(num = 2)           # tell the program we selecting figure 2 to update
    plt.clf()                     # clearing information on chart
    plt.plot(asset_cycle)         # plotting new selected data
    plt.title('CYCLICAL TENDANCY') # adding title from seleected data
    plt.tight_layout() 
    plt.draw()                    # drawing the information on the chart


# \\  -------- FORECAST -------- //

# draw chart function
def drawForecastChart():
    _VARS['pltFig_forecast'] = plt.figure(num = 3, figsize =(5.75, 6), dpi = 80)
    data = getData()
    plt.plot(data['EURUSD=X'])
    plt.title('FORECAST')
    plt.tight_layout() 
    _VARS['fig_agg_forecast'] = draw_figure(
        _VARS['window']['figCanvas_Forecast'].TKCanvas, _VARS['pltFig_forecast'])

# update chart function
def updateForecastChart(): 

    plt.figure(num = 3)                  # tell the program we selecting figure 2 to update
    plt.clf()                            # clearing the chart
    plt.plot(df_forecast[assetSelected]) # accessing the dataframe of forecasted data and picking the column of the selected object
    plt.title('FORECAST')                # adding a title
    plt.tight_layout() 
    plt.draw()                           # drawing the information on the chart

# \\  -------- HISTOGRAM -------- //

def drawHistChart():
    _VARS['pltFig_hist'] = plt.figure(num = 5, figsize =(5.75, 6), dpi = 80)
    data = getData()
    data_ROC = data.pct_change(periods = 1)  # change period number to selected timeframe eventually
    plt.hist(data_ROC['EURUSD=X'], bins = 100)
    plt.title('HISTOGRAM')
    plt.tight_layout() 
    _VARS['fig_agg_hist'] = draw_figure(
        _VARS['window']['figCanvas_Hist'].TKCanvas, _VARS['pltFig_hist'])

def updateHistChart(): 

    data = getData()
    data_ROC = data.pct_change(periods = 1)  # change period number to selected timeframe eventually

    # calculating quantiles
    q_5 = float(data_ROC[assetSelected].quantile(0.5))
    q_75 = float(data_ROC[assetSelected].quantile(0.75))
    q_25 = float(data_ROC[assetSelected].quantile(0.25))

    plt.figure(num = 5)                  # tell the program we selecting figure 2 to update
    plt.clf()                            # clearing the chart
    plt.hist(data_ROC[assetSelected], bins = 100) # accessing the dataframe of forecasted data and picking the column of the selected object
    plt.title('HISTOGRAM')                # adding a title
    plt.axvline(q_5)
    plt.axvline(q_25)
    plt.axvline(q_75)
    plt.tight_layout() 
    plt.draw()  

# \\  -------- RATE OF CHANGE -------- //

def drawRocChart():
    _VARS['pltFig_roc'] = plt.figure(num = 6, figsize =(5.75, 6), dpi = 80)
    data = getData()
    data_ROC = data.pct_change(periods = 1)  # change period number to selected timeframe eventually
    plt.plot(data_ROC['EURUSD=X'])
    plt.title('RATE OF CHANGE')
    plt.tight_layout() 
    _VARS['fig_agg_roc'] = draw_figure(
        _VARS['window']['figCanvas_Roc'].TKCanvas, _VARS['pltFig_roc'])

def updateRocChart(): 

    data = getData()
    data_ROC = data.pct_change(periods = 1)  # change period number to selected timeframe eventually

    # calculating quantiles
    q_5 = float(data_ROC[assetSelected].quantile(0.5))
    q_75 = float(data_ROC[assetSelected].quantile(0.75))
    q_25 = float(data_ROC[assetSelected].quantile(0.25))

    plt.figure(num = 6)                  # tell the program we selecting figure 2 to update
    plt.clf()                            # clearing the chart
    plt.plot(data_ROC[assetSelected]) # accessing the dataframe of forecasted data and picking the column of the selected object
    plt.title('RATE OF CHANGE')                # adding a title
    plt.axhline(q_5)
    plt.axhline(q_25)
    plt.axhline(q_75)
    plt.tight_layout() 
    plt.draw()  

# \\  -------- UPDATING DISTRIBUTION CHARTS PERIOD PARAMETER BASED ON TIMEFRAME SLIDER -------- //

def updateDistCharts():


    data = getData()
    data_ROC = data.pct_change(periods = period_selected)  # change period number to selected timeframe eventually
    data_ROC = data_ROC[period_selected:]  # remove first nulls

    # calculating quantiles
    q_5 = float(data_ROC[assetSelected].quantile(0.5))
    q_75 = float(data_ROC[assetSelected].quantile(0.75))
    q_25 = float(data_ROC[assetSelected].quantile(0.25))

    plt.figure(num = 5)                  # tell the program we selecting figure 2 to update
    plt.clf()                            # clearing the chart
    plt.hist(data_ROC[assetSelected], bins = 100) # accessing the dataframe of forecasted data and picking the column of the selected object
    plt.title('HISTOGRAM')                # adding a title
    plt.axvline(q_5)
    plt.axvline(q_25)
    plt.axvline(q_75)
    plt.tight_layout() 
    plt.draw()  

    plt.figure(num = 6)                  # tell the program we selecting figure 2 to update
    plt.clf()                            # clearing the chart
    plt.plot(data_ROC[assetSelected]) # accessing the dataframe of forecasted data and picking the column of the selected object
    plt.title('RATE OF CHANGE')                # adding a title
    plt.axhline(q_5)
    plt.axhline(q_25)
    plt.axhline(q_75)
    plt.tight_layout() 
    plt.draw() 

    data_resampled = data.iloc[::period_selected, :] # skip every #th row in the dataframe
    # main chart
    plt.figure(num = 1)           # tell the program we selecting figure 1 to update
    plt.clf()                     # clearing information on chart 
    plt.plot(data_resampled[assetSelected]) # plotting new selected data
    plt.title(assetSelected)      # adding title from seleected data
    plt.tight_layout() 
    plt.draw()                    # drawing the information on the chart 


# \\  -------- PYPLOT -------- //
drawCycleChart()
drawMainChart()
drawHistChart()
drawRocChart()

# \\  -------- LOGIC FOR FORECASTING ONCE PER DAY -------- //

# as we have daily data we dont need to forecast more than once per day. this section checks a csv file for forecasts 30 days from todays date.
# if they are found we dont need to generate new forecsats, we just import them from the csv

try: 

    # try reading in the dataframe - later change this to an option the user can decide
    forecast = pd.read_csv(r'C:\Users\Chris\Desktop\UlsterUniversity\Final Project\PySimpleGUI\df_forecast.csv', index_col = 0)

    # getting last day of forecast - 30 days from now
    forecast_end = dt.datetime.now() + timedelta(days = 29)  # starting day + forecast days - 1. 
    forecast_end = forecast_end.date() # formatting to just Y M D

    # converting last day of df_index into appropriate variable format
    final_forecast = datetime.strptime(forecast.index[29], '%Y-%m-%d %H:%M:%S.%f').date()

 
    # check if forecast in 30 days time has already been made
    if final_forecast == forecast_end:

        # convert index to y - m - d format and datetime
        forecast.index = pd.to_datetime(forecast.index).strftime('%Y-%m-%d')

        # new
        forecast.index = forecast.index = [1, 2, 3,4 ,5 ,6 , 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]

        # if forecast has already been made, load csv data to variable
        df_forecast = forecast

    else:

        # if forecast wasnt in csv file called function to generate forecast
        df_forecast = get_forecast_analysis() # only call this once on start up as it is intensive - later improve saving file if not made already today etc

        # save forecast to csv
        df_forecast.to_csv('df_forecast.csv')

        # convert index to y - m - d format and datetime
        df_forecast.index = pd.to_datetime(df_forecast.index).strftime('%Y-%m-%d')

        # new
        df_forecast.index = df_forecast.index = [1, 2, 3,4 ,5 ,6 , 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]

# no file found
except: 

    # if forecast wasnt in csv file called function to generate forecast
    df_forecast = get_forecast_analysis() # only call this once on start up as it is intensive - later improve saving file if not made already today etc

    # save forecast to csv
    df_forecast.to_csv('df_forecast.csv')

    # convert index to y - m - d format and datetime
    df_forecast.index = pd.to_datetime(df_forecast.index).strftime('%Y-%m-%d')

    # new
    df_forecast.index = df_forecast.index = [1, 2, 3,4 ,5 ,6 , 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]

drawForecastChart()

# \\  -------- MAIN LOOP -------- //
while True:
     
    event, value = _VARS['window'].read(timeout=200)

    # if window closed or exited - break
    if event == sg.WIN_CLOSED or event == 'Exit':
        break

    # if listbox item is selected:
    if event == '-LISTBOX_CLICK-':

       # saves listbox item selected
       assetSelected = value['-LISTBOX_CLICK-']
       #calls update chart function
       updateCycleChart()

       updateMainChart()
       
       updateForecastChart()

       updateHistChart()

       updateRocChart()

    # if correlation button is clicked
    if event == 'Correlations':
           
        # calls correlation function
        get_Corr_Matrix()

    if event == 'TIMEFRAME_ADJUST':

        try:
            
            assetSelected

        except:

            sg.Popup('Please Select and Asset From the ListBox')
        
        else:

            period_selected = int(value['TIMEFRAME_ADJUST'])

            

            updateDistCharts()

    # input for custom watchlist
    if event == 'INPUT_TEXT' + "_Enter":

        if value['INPUT_TEXT'] in assetsList:

            custom_assetList.append(value['INPUT_TEXT'])

            # refreshes the call to the listbox to display the new variable
            _VARS['window']['-CUSTOM-LISTBOX_CLICK-'].update(values = custom_assetList)

        else:

            sg.Popup('No Asset With That Ticker')
    
    # logic for custom watchlist

    # if listbox item is selected:
    if event == '-CUSTOM-LISTBOX_CLICK-':

       # saves listbox item selected
       assetSelected = value['-CUSTOM-LISTBOX_CLICK-']
       #calls update chart function
       updateCycleChart()

       updateMainChart()
       
       updateForecastChart()

       updateHistChart()

       updateRocChart()

    # logic for sorting watchlist

    if event == '-SORT-AZ-':

        _VARS['window']['-LISTBOX_CLICK-'].update(values = az_assetslist)

    if event == '-SORT-PRICE-':

        _VARS['window']['-LISTBOX_CLICK-'].update(values = price_assetslist)

    if event == '-SORT-ROC-':

        _VARS['window']['-LISTBOX_CLICK-'].update(values = ROC_assetslist)


    # input for custom additional ticker symbol on main chart
    if event == 'ADDITIONAL_TICKER' + "_Enter":

        sg.Popup('entered if statement')

        if value['ADDITIONAL_TICKER'] in assetsList:

            sg.Popup('entered second if statement')

            assetSelected2 = value['ADDITIONAL_TICKER']

            sg.Popup('entered second if statement, second part')

            updateMainChartAdd()

            sg.Popup('entered second if statement, third part')

        else:

            sg.Popup('No Asset With That Ticker')
    
    # logic for custom watchlist

_VARS['window'].close()
